﻿@model ForumApp.Models.Post

<link rel="stylesheet" type="text/css" href="~/Content/Posts/PostsStyle.css" />


@Html.Partial("_Breadcrumb", ViewBag.Breadcrumbs as IEnumerable<ForumApp.Models.BreadcrumbItem>)






<h2>@Model.Title</h2>
<p>@Model.Content</p>
<p>
    Posted on @Model.DateCreated by @Html.ActionLink(Model.User.UserName, "Index", "Profile", new { id = Model.UserId }, new { @class = "username-link" }) <img src="@Model.User.ProfilePictureUrl" alt="Profile Picture" class="rounded-circle me-2" style="width: 100px; height: 100px; object-fit: cover;" />
    @if (ViewBag.UserRole == "Admin" || ViewBag.UserRole == "Moderator")
    {
        <span style="font-size:30px;color:gold;font-weight:bold">(@ViewBag.UserRole)</span>

    }
    else
    {
        <span class="text-dark" style="font-size:30px;font-weight:bold">(@ViewBag.UserRole)</span>
    }
</p>


<div>
    @if (User.Identity.IsAuthenticated)
    {
        <!-- Post Upvote Button -->
        <button id="upvote-post-@Model.PostId" class="btn btn-sm btn-outline-success btn-vote @(ViewBag.UserPostVoteType == 1 ? "selected-vote" : "")"
                onclick="upvotePost(@Model.PostId)">
            Upvote
        </button>
        <span> <span id="post-upvotes">@Model.Upvotes</span></span>

        <!-- Post Downvote Button -->
        <button id="downvote-post-@Model.PostId" class="btn btn-sm btn-outline-danger btn-vote @(ViewBag.UserPostVoteType == -1 ? "selected-vote" : "")"
                onclick="downvotePost(@Model.PostId)">
            Downvote
        </button>
        <span> <span id="post-downvotes">@Model.Downvotes</span></span>
    }
    else
    {
        <button class="btn btn-success" disabled>Upvote</button>
        <button class="btn btn-danger" disabled>Downvote</button>
        <p>Please log in to vote.</p>
    }



</div>




<h3>Comments</h3>
@if (User.Identity.IsAuthenticated)
{
    <h4>Leave a Comment</h4>
    using (Html.BeginForm("Create", "Comments", FormMethod.Post, new { id = "postCommentForm" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.PostId)

        <div class="form-group">
            @Html.LabelFor(m => m.Content, "Comment")
            @Html.TextAreaFor(m => m.Content, new { @class = "form-control", rows = 4 })
            @Html.ValidationMessageFor(m => m.Content, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            <input type="submit" value="Post Comment" class="btn btn-primary" />
        </div>
        <div id="postCommentError" class="text-danger"></div>
    }




}
else
{
    <p>Please <a href="@Url.Action("Login", "Account")">log in</a> to leave a comment.</p>
}

@if (Model.Comments.Any())
{
    <div id="comments-section">
        @Html.Partial("~/Views/Comments/_CommentList.cshtml", Model.Comments.Where(c => c.ParentCommentId == null).ToList())
    </div>
}
else
{
    <div id="comments-section">
        <p>No comments yet. Be the first to comment!</p>
    </div>
}




@section Scripts {


    <script>
    $(document).ready(function () {
        var commentId = window.location.hash.substring(1); // Get the comment ID from the URL fragment
        if (commentId) {
            console.log("Highlighting comment:", commentId);
            $('#comment-' + commentId).addClass('highlight-comment'); // Add a CSS class to highlight the comment
        }

        // Check if the URL has the "highlightUserComments" parameter
        const urlParams = new URLSearchParams(window.location.search);
        const userIdToHighlight = urlParams.get('highlightUserComments');

        if (userIdToHighlight) {
            console.log('Highlighting comments for user ID:', userIdToHighlight);

            // Loop through all comments and highlight those by the user
            $('[data-user-id]').each(function () {
                const commentUserId = $(this).data('user-id'); // Get the user ID for the comment
                console.log("Comment user ID:", commentUserId);
                if (commentUserId == userIdToHighlight) {
                    $(this).addClass('highlight-comment'); // Add a CSS class to highlight the comment
                }
            });
        }
        hideReplyForms();
    });


    function deleteComment(commentId) {
        bootbox.confirm("Are you sure you want to delete this comment and all its replies?", function (result) {
            if (result) {
                $.ajax({
                    url: '@Url.Action("DeleteComment", "Comments")',
                    type: 'POST',
                    data: { commentId: commentId },
                    success: function (data) {
                        if (data.success) {
                            console.log("Deleting comment " + commentId);
                            removeCommentAndReplies(commentId);  // Call to remove comments from the DOM
                        } else {
                            bootbox.alert('Failed to delete comment: ' + data.error);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.log("Error deleting comment:", error);
                        bootbox.alert('An error occurred while deleting the comment.');
                    }
                });
            }
        });
    }


    function removeCommentAndReplies(commentId) {
        var commentWrapper = $('#comment-wrapper-' + commentId);

        // First, remove all nested replies within this comment
        commentWrapper.find('div[id^="comment-wrapper-"]').each(function () {
            var nestedCommentId = $(this).attr('id').split('-')[2];
            console.log("Removing nested comment: " + nestedCommentId);
            $(this).remove();
        });

        // Now remove the parent comment itself
        console.log("Removing parent comment: " + commentId);
        commentWrapper.remove();

        // Check if there are no more comments left and update the UI accordingly
        if ($('#comments-section').find('div[id^="comment-wrapper-"]').length === 0) {
            $('#comments-section').html('<p>No comments yet. Be the first to comment!</p>');
        }
    }

    function softDeleteComment(commentId) {
        console.log("Tuka sum")

        bootbox.confirm("Are you sure you want to delete this comment?", function (result) {
            if (result) {
                $.ajax({
                    url: '@Url.Action("SoftDeleteComment", "Comments")',
                    type: 'POST',
                    data: { commentId: commentId },
                    success: function (data) {
                        if (data.success) {
                            // Replace the comment content with "User deleted this comment"
                            $('#comment-' + commentId).find('p:first').html('<div >User deleted this comment</div>');
                            $('#comment-buttons-' + commentId).remove();
                            $('#upvote-comment-' + commentId).remove(); // Hide the upvote button if needed
                            $('#downvote-comment-' + commentId).remove(); // Hide the downvote button if needed

                            // Optionally, disable the soft delete button
                            $('#soft-delete-comment-' + commentId).remove()
                            $('#hard-delete-comment-' + commentId).css('display', 'block');
                        } else {
                            bootbox.alert('Failed to delete comment: ' + data.message);
                        }
                    },
                    error: function (err) {
                        console.log("Error deleting comment:", err);
                        bootbox.alert('An error occurred while deleting the comment.');
                    }
                });
            }
        });
    }



    // Function to hide all reply forms and set up event handlers for reply buttons and cancel buttons
    function hideReplyForms() {
        // Hide all reply forms on the page
        $('.reply-form-container').hide();

        // Clear the content of all reply forms
        $('.reply-form-container').find('textarea').val('');
    }


    // Handle reply form submission via AJAX
    $(document).on('submit', '.reply-form', function (e) {
        e.preventDefault(); // Prevent default form submission
        var form = $(this);
        var formData = form.serialize();

        console.log(formData); // Log the serialized form data to check if ParentCommentId is correctly passed
        $.ajax({
            url: form.attr('action'),
            type: form.attr('method'),
            data: formData,
            success: function (result) {
                // Update the comments section with the returned partial view
                $('#comments-section').html(result);

                // Clear the comment form
                form.find('textarea').val('');
                form[0].reset();


                // Reinitialize the reply forms and event handlers after the DOM is updated
                hideReplyForms();
            },
            error: function (xhr, status, error) {
                // Handle error
                alert('This content is larger than 500 characters!');
            }
        });
    });


    // Toggle reply form visibility on reply button click
    $(document).on('click', '.reply-button', function () {
        var target = $(this).data('target');

        var parentCommentId = target.split('-')[1]; // Extract ParentCommentId from target (assumes target is in format "replyForm-{CommentId}")

        console.log("ParentCommentId: " + parentCommentId); // Log the ParentCommentId to the console

        // Update the hidden ParentCommentId field in the reply form
        $('#' + target).find('input[name="ParentCommentId"]').val(parentCommentId);


        $('#' + target).toggle(); // Toggle the reply form container visibility
    });

    // Hide reply form on cancel button click
    $(document).on('click', '.cancel-button', function () {
        var target = $(this).data('target');
        $('#' + target).hide(); // Hide the reply form container
    });

    // Handle comment form submission via AJAX
    $(document).on('submit', '#postCommentForm', function (e) {
        e.preventDefault(); // Prevent default form submission
        var form = $(this);
        var formData = form.serialize();
        $.ajax({
            url: form.attr('action'),
            type: form.attr('method'),
            data: formData,
            success: function (result) {
                // Update the comments section with the returned partial view
                $('#comments-section').html(result);

                // Clear the comment form
                form.find('textarea').val('');
                form[0].reset();

                // Reinitialize the reply forms and event handlers after the DOM is updated
                hideReplyForms();
            },
            error: function (xhr, status, error) {
                // Handle error
                alert('An error occurred while submitting the comment: ' + error);
            }
        });
    });

    // Function for upvote and downvote post


function applySelectedStyle(button) {
    button.css({
        'background-color': '#ffc107',
        'border-color': '#ffc107',
        'color': '#000'
    }).addClass('selected-vote');
    console.log('Applied selected style to:', button);
}

function removeSelectedStyle(button) {
    button.css({
        'background-color': '',
        'border-color': '',
        'color': ''
    }).removeClass('selected-vote');
    console.log('Removed selected style from:', button);
}

    function upvotePost(postId) {
        console.log('Upvote clicked for post:', postId);
        $.post('@Url.Action("UpvotePost", "Posts")', { postId: postId }, function (data) {
            console.log('Upvote response:', data);
            if (data.success) {
                $('#post-upvotes').text(data.upvotes);
                $('#post-downvotes').text(data.downvotes);

                var upvoteButton = $('#upvote-post-' + postId);
                var downvoteButton = $('#downvote-post-' + postId);

                if (upvoteButton.hasClass('selected-vote')) {
                    removeSelectedStyle(upvoteButton);
                } else {
                    applySelectedStyle(upvoteButton);
                    removeSelectedStyle(downvoteButton);
                }
            } else {
                console.error('Error upvoting post:', data.error);
                alert('An error occurred while upvoting the post: ' + data.error);
            }
        }).fail(function (xhr, status, error) {
            console.error('AJAX error upvoting post:', status, error);
            alert('An error occurred while upvoting the post: ' + error);
        });
    }

    function downvotePost(postId) {
        console.log('Downvote clicked for post:', postId);
        $.post('@Url.Action("DownvotePost", "Posts")', { postId: postId }, function (data) {
            console.log('Downvote response:', data);
            if (data.success) {
                $('#post-upvotes').text(data.upvotes);
                $('#post-downvotes').text(data.downvotes);

                var upvoteButton = $('#upvote-post-' + postId);
                var downvoteButton = $('#downvote-post-' + postId);

                if (downvoteButton.hasClass('selected-vote')) {
                    removeSelectedStyle(downvoteButton);
                } else {
                    applySelectedStyle(downvoteButton);
                    removeSelectedStyle(upvoteButton);
                }
            } else {
                console.error('Error downvoting post:', data.error);
                alert('An error occurred while downvoting the post: ' + data.error);
            }
        }).fail(function (xhr, status, error) {
            console.error('AJAX error downvoting post:', status, error);
            alert('An error occurred while downvoting the post: ' + error);
        });
    }



    function upvoteComment(commentId) {
    $.post('@Url.Action("UpvoteComment", "Comments")', { commentId: commentId }, function (data) {
        if (data.success) {
            $('#comment-upvotes-' + commentId).text(data.upvotes);
            $('#comment-downvotes-' + commentId).text(data.downvotes);

            var upvoteButton = $('#upvote-comment-' + commentId);
            var downvoteButton = $('#downvote-comment-' + commentId);


            if (upvoteButton.hasClass('selected-vote')) {
                removeSelectedStyle(upvoteButton);
            } else {
                applySelectedStyle(upvoteButton);
                removeSelectedStyle(downvoteButton);
            }
        } else {
            alert('An error occurred while upvoting the comment.');
        }
    });
}

function downvoteComment(commentId) {
    $.post('@Url.Action("DownvoteComment", "Comments")', { commentId: commentId }, function (data) {
        if (data.success) {
            $('#comment-upvotes-' + commentId).text(data.upvotes);
            $('#comment-downvotes-' + commentId).text(data.downvotes);

            var upvoteButton = $('#upvote-comment-' + commentId);
            var downvoteButton = $('#downvote-comment-' + commentId);

            if (downvoteButton.hasClass('selected-vote')) {
                removeSelectedStyle(downvoteButton);
            } else {
                applySelectedStyle(downvoteButton);
                removeSelectedStyle(upvoteButton);
            }
        } else {
            alert('An error occurred while downvoting the comment.');
        }
    });
}


    </script>
}
