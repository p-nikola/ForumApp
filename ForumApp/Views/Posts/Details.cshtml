﻿@model ForumApp.Models.Post

<link rel="stylesheet" type="text/css" href="~/Content/Posts/PostsStyle.css" />


<h2>@Model.Title</h2>
<p>@Model.Content</p>
<p>Posted on @Model.DateCreated by @Html.ActionLink(Model.User.UserName, "Index", "Profile", new { id = Model.UserId }, new { @class = "username-link" }) <img src="@Model.User.ProfilePictureUrl" alt="Profile Picture" class="profile-picture" style="width:100px" /></p>

<div>
    <button class="btn btn-success" onclick="upvotePost(@Model.PostId)">Upvote</button>
    <span>Upvotes: <span id="post-upvotes">@Model.Upvotes</span></span>
    <button class="btn btn-danger" onclick="downvotePost(@Model.PostId)">Downvote</button>
    <span>Downvotes: <span id="post-downvotes">@Model.Downvotes</span></span>
</div>



<h3>Comments</h3>

<h4>Leave a Comment</h4>
@using (Html.BeginForm("Create", "Comments", FormMethod.Post, new { id = "postCommentForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.PostId)

    <div class="form-group">
        @Html.LabelFor(m => m.Content, "Comment")
        @Html.TextAreaFor(m => m.Content, new { @class = "form-control", rows = 4 })
        @Html.ValidationMessageFor(m => m.Content, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        <input type="submit" value="Post Comment" class="btn btn-primary" />
    </div>
    <div id="postCommentError" class="text-danger"></div>
}

@if (Model.Comments.Any())
{
    @* Display top-level comments *@
    <div id="comments-section">
        @Html.Partial("_CommentList", Model.Comments.Where(c => c.ParentCommentId == null).ToList())
    </div>

}
else
{
    <p>No comments yet. Be the first to comment!</p>
}



@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            var commentId = window.location.hash.substring(1); // Get the comment ID from the URL fragment
            if (commentId) {
                console.log("Highlighting comment:", commentId);
                $('#' + commentId).addClass('highlight-comment'); // Add a CSS class to highlight the comment
            }


            // Hide all reply form containers on page
            $('.reply-form-container').hide();

            // Toggle reply form visibility
            $(document).on('click', '.reply-button', function () {
                var target = $(this).data('target');
                $('#' + target).toggle(); // Toggle the reply form container visibility
            });

            // Cancel button functionality
            $(document).on('click', '.cancel-button', function () {
                var target = $(this).data('target');
                $('#' + target).hide(); // Hide the reply form container
            });
        });

         function upvotePost(postId) {
            $.post('@Url.Action("UpvotePost", "Posts")', { postId: postId }, function (data) {
                if (data.success) {
                    $('#post-upvotes').text(data.upvotes); // Update the upvotes count
                }
            });
        }

        function downvotePost(postId) {
            $.post('@Url.Action("DownvotePost", "Posts")', { postId: postId }, function (data) {
                if (data.success) {
                    $('#post-downvotes').text(data.downvotes); // Update the downvotes count
                }
            });
        }



    </script>
}